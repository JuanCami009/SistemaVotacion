Buscando carpetas con código fuente...
--------------------------------------------------------------

📁 Carpeta procesada: ./client/src
Estructura completa:
./client/src
└── main
    ├── java
    │   ├── Client.java
    │   └── services
    │       └── ClientReceiver.java
    └── resources
        └── client.config

5 directories, 3 files

🧾 Archivos de código en ./client/src (con contenido):

./client/src/main/java/Client.java

import client.Mesa;
import com.zeroc.Ice.*;
import model.Message;
import reliableMessage.RMDestinationPrx;
import reliableMessage.RMSourcePrx;
import services.ClientReceiver;

public class Client {
    public static void main(String[] args) {
        try (Communicator communicator = Util.initialize(args)) {
            // Proxy hacia reliable message
            RMSourcePrx rm = RMSourcePrx.checkedCast(communicator.stringToProxy("Sender:tcp -h localhost -p 10010"));
            RMDestinationPrx dest = RMDestinationPrx.uncheckedCast(communicator.stringToProxy("Service:tcp -h localhost -p 10012"));
            rm.setServerProxy(dest);

            ObjectAdapter adapter = communicator.createObjectAdapterWithEndpoints("Client", "tcp -h localhost -p 10000");
            // Pasamos rm al servicio que implementa Mesa para poder reenviar
            Mesa servant = new ClientReceiver(rm);

            adapter.add(servant, Util.stringToIdentity("client"));
            adapter.activate();

            System.out.println("Cliente activo, esperando mensajes de mesa...");
            communicator.waitForShutdown();
        }
    }
}

--------------------------------------------------


./client/src/main/java/services/ClientReceiver.java

package services;

import client.Mesa;
import client.Voto;
import com.zeroc.Ice.Current;
import model.Message;
import reliableMessage.RMSourcePrx;

public class ClientReceiver implements Mesa {

    private final RMSourcePrx rm;

    public ClientReceiver(RMSourcePrx rm) {
        this.rm = rm;
    }

   @Override
    public void enviarVoto(Voto voto, Current current) {
        System.out.println("Voto recibido de documento " + voto.documento + " para candidato " + voto.idCandidato);

        Message msg = new Message();
        msg.message = "Documento: " + voto.documento + ", Candidato: " + voto.idCandidato;
        msg.documento = voto.documento;
        msg.idCandidato = voto.idCandidato;

        try {
            rm.sendMessage(msg);
            System.out.println("Voto reenviado a ReliableMessaging.");
        } catch (Exception e) {
            System.err.println("Error reenviando voto: " + e.getMessage());
        }
    }

}

--------------------------------------------------


./client/src/main/resources/client.config

MesaService.Endpoints=tcp -h localhost -p 10000
--------------------------------------------------


📁 Carpeta procesada: ./mesaVotacion/src
Estructura completa:
./mesaVotacion/src
└── main
    └── java
        └── MesaVotacion.java

3 directories, 1 file

🧾 Archivos de código en ./mesaVotacion/src (con contenido):

./mesaVotacion/src/main/java/MesaVotacion.java

import client.MesaPrx;
import client.Voto;
import com.zeroc.Ice.*;

import java.util.Scanner;

public class MesaVotacion {
    public static void main(String[] args) {
        try (Communicator communicator = Util.initialize(args)) {
            ObjectPrx base = communicator.stringToProxy("client:tcp -h localhost -p 10000");
            MesaPrx cliente = MesaPrx.checkedCast(base);

            if (cliente == null) {
                System.err.println("No se pudo obtener el proxy del cliente.");
                return;
            }

            Scanner scanner = new Scanner(System.in);

            while (true) {
                System.out.print("Documento del votante (o 'salir'): ");
                String documento = scanner.nextLine();
                if (documento.equalsIgnoreCase("salir")) break;

                System.out.print("ID del candidato: ");
                int idCandidato = Integer.parseInt(scanner.nextLine());

                Voto voto = new Voto();
                voto.documento = documento;
                voto.idCandidato = idCandidato;

                cliente.enviarVoto(voto);
                System.out.println("Voto enviado correctamente al cliente.\n");
            }

            scanner.close();
        }
    }
}

--------------------------------------------------


📁 Carpeta procesada: ./reliableServer/src
Estructura completa:
./reliableServer/src
└── main
    ├── java
    │   ├── communication
    │   │   └── Notification.java
    │   ├── model
    │   │   ├── Message.java
    │   │   └── ReliableMessage.java
    │   ├── ReliableServer.java
    │   ├── services
    │   │   ├── RMReciever.java
    │   │   └── RMSender.java
    │   └── threads
    │       └── RMJob.java
    └── resources
        └── rmservice.config

8 directories, 8 files

🧾 Archivos de código en ./reliableServer/src (con contenido):

./reliableServer/src/main/java/ReliableServer.java

import com.zeroc.Ice.Communicator;
import com.zeroc.Ice.ObjectAdapter;
import com.zeroc.Ice.ObjectPrx;
import com.zeroc.Ice.Util;

import communication.Notification;
import reliableMessage.ACKServicePrx;
import services.RMReciever;
import services.RMSender;
import threads.RMJob;

public class ReliableServer {
    
    public static void main(String[] args) {
        Communicator communicator = Util.initialize(args, "rmservice.config");

        Notification notification = new Notification();
        RMJob job = new RMJob(notification);
        RMReciever rec = new RMReciever(job);
        RMSender sender = new RMSender(job, notification);

        ObjectAdapter adapter = communicator.createObjectAdapter("RMService");
        adapter.add(sender, Util.stringToIdentity("Sender"));
        ObjectPrx prx = adapter.add(rec, Util.stringToIdentity("AckCallback"));
        notification.setAckService(ACKServicePrx.checkedCast(prx));
        adapter.activate();
        job.start();

        communicator.waitForShutdown();
        
    }

    
}

--------------------------------------------------


./reliableServer/src/main/java/communication/Notification.java

package communication;

import model.ReliableMessage;
import reliableMessage.RMDestinationPrx;
import reliableMessage.ACKServicePrx;

public class Notification {

    private RMDestinationPrx service;

    private ACKServicePrx ackService;

    public void setAckService(ACKServicePrx ackService) {
        this.ackService = ackService;
    }

    public void setService(RMDestinationPrx service) {
        this.service = service;
    }

    public void sendMessage(ReliableMessage message){
        service.reciveMessage(message, ackService);
    }

    public RMDestinationPrx getService() {
        return service;
    }

}

--------------------------------------------------


./reliableServer/src/main/java/model/ReliableMessage.java

package model;

import java.io.Serializable;

public class ReliableMessage implements Serializable{
    
    private String uuid;
    private long numberMessage;
    private String state;

    private Message message;

    public ReliableMessage(String uuid, long numberMessage, String state, Message message) {
        this.uuid = uuid;
        this.numberMessage = numberMessage;
        this.state = state;
        this.message = message;
    }

    public String getUuid() {
        return uuid;
    }

    public void setUuid(String uuid) {
        this.uuid = uuid;
    }

    public long getNumberMessage() {
        return numberMessage;
    }

    public void setNumberMessage(long numberMessage) {
        this.numberMessage = numberMessage;
    }

    public String getState() {
        return state;
    }

    public void setState(String state) {
        this.state = state;
    }

    public Message getMessage() {
        return message;
    }

    public void setMessage(Message message) {
        this.message = message;
    }
    
    
    
    
}

--------------------------------------------------


./reliableServer/src/main/java/model/Message.java

package model;

import java.io.Serializable;

public class Message implements Serializable {
    public String message;
    public String documento; // opcional, si necesitas identificar el documento del voto
    public int idCandidato; // opcional, si necesitas identificar el candidato del voto
}

--------------------------------------------------


./reliableServer/src/main/java/services/RMReciever.java

package services;

import com.zeroc.Ice.Current;

import reliableMessage.ACKService;
import threads.RMJob;

public class  RMReciever implements  ACKService {

    private RMJob jobM;

    

    public RMReciever(RMJob job) {
        this.jobM = job;
    }

    @Override
    public void ack(String messageId, Current current) {
        jobM.confirmMessage(messageId);
    }

    
    
}

--------------------------------------------------


./reliableServer/src/main/java/services/RMSender.java

package services;

import com.zeroc.Ice.Current;

import communication.Notification;
import model.Message;
import reliableMessage.RMDestinationPrx;
import reliableMessage.RMSource;
import threads.RMJob;

public class RMSender implements RMSource{

    private RMJob jobM;
    private Notification notification;

    
    public RMSender(RMJob job, Notification not) {
        notification = not;
        jobM = job;
    }


    @Override
    public void sendMessage(Message msg, Current current) {
        jobM.add(msg);
    }
    @Override
    public void setServerProxy(RMDestinationPrx destination, Current current){
        notification.setService(destination);
    }


    
}

--------------------------------------------------


./reliableServer/src/main/java/threads/RMJob.java

    package threads;

import java.util.Map;
import java.util.UUID;
import java.util.concurrent.ConcurrentHashMap;

import communication.Notification;
import model.Message;
import model.ReliableMessage;

public class RMJob extends Thread{

    public static final String PENDING = "Pending";
    public static final String SENDED = "Sended";

    private Map<String,ReliableMessage> messagesPendig = new ConcurrentHashMap<>();
    private Map<String,ReliableMessage> forConfirm = new ConcurrentHashMap<>();


    private Long sequenceNumber = 0l;
    private Object lock = new Object();
    private boolean enable = true;
    private Notification notification;

    public RMJob(Notification notification) {
        this.notification = notification;
    }

    public void add(Message message){
        synchronized (lock) {
            ReliableMessage mes = new ReliableMessage(UUID.randomUUID().toString(), sequenceNumber++, PENDING, message);
            messagesPendig.put(mes.getUuid(),mes);
        }
    }

    public void confirmMessage(String uid){
        forConfirm.remove(uid);
    }

    public void setEnable(boolean enable) {
        this.enable = enable;
    }

    @Override
    public void run(){
        while (enable) { 
            for(Map.Entry<String,ReliableMessage> rm: messagesPendig.entrySet()){
                try {
                    System.out.println("Sending message");
                    notification.sendMessage(rm.getValue());
                    messagesPendig.remove(rm.getKey());
                    forConfirm.put(rm.getKey(), rm.getValue());
                    System.out.println("Message sent: " + rm.getValue().getMessage().documento + " - " + rm.getValue().getMessage().idCandidato);

                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            try {
                Thread.sleep(10000);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
}

--------------------------------------------------


./reliableServer/src/main/resources/rmservice.config

RMService.Endpoints=tcp -h localhost -p 10010
--------------------------------------------------


📁 Carpeta procesada: ./server/src
Estructura completa:
./server/src
└── main
    ├── java
    │   ├── db
    │   │   ├── ConexionBD.java
    │   │   └── ManejadorDatos.java
    │   ├── model
    │   │   ├── Candidato.java
    │   │   ├── Ciudadano.java
    │   │   ├── CiudadanoVoto.java
    │   │   ├── Departamento.java
    │   │   ├── MesaVotacion.java
    │   │   ├── Municipio.java
    │   │   ├── PuestoVotacion.java
    │   │   └── Voto.java
    │   ├── Server.java
    │   ├── ServiceImp.java
    │   └── services
    │       └── VoteStationImpl.java
    └── resources
        └── server.config

7 directories, 14 files

🧾 Archivos de código en ./server/src (con contenido):

./server/src/main/java/Server.java

import com.zeroc.Ice.Communicator;
import com.zeroc.Ice.ObjectAdapter;
import com.zeroc.Ice.Util;

import services.VoteStationImpl;
import app.VoteStation;

public class Server {

    public static void main(String[] args) {
        Communicator com = Util.initialize(args, "server.config"); // << aquí está el cambio
        ServiceImp imp = new ServiceImp();
        VoteStation voteService = new VoteStationImpl();


        ObjectAdapter adapter = com.createObjectAdapter("Server");

        adapter.add(voteService, Util.stringToIdentity("voteStation"));
        adapter.add(imp, Util.stringToIdentity("Service"));
        adapter.activate();
        com.waitForShutdown();
    }
}

--------------------------------------------------


./server/src/main/java/ServiceImp.java

import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;

import com.zeroc.Ice.Current;

import services.VoteStationImpl;
import model.Message;
import model.ReliableMessage;
import reliableMessage.ACKServicePrx;
import reliableMessage.RMDestination;

public class ServiceImp implements RMDestination {

    private Set<Integer> votosProcesados = ConcurrentHashMap.newKeySet();

    public int contadorExito=0;

    public int contadorDuplicado=0;

    @Override
    public void reciveMessage(ReliableMessage rmessage, ACKServicePrx prx, Current current) {
        Message msg = rmessage.getMessage();
        prx.ack(rmessage.getUuid());

        VoteStationImpl validador = new VoteStationImpl();
        int result = validador.vote(msg.documento, msg.idCandidato, current);
        System.out.println("Resultado de validación y almacenamiento: " + result);
    }

}

--------------------------------------------------


./server/src/main/java/db/ConexionBD.java

package db;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import com.zeroc.Ice.Communicator;
import com.zeroc.Ice.Properties;

public class ConexionBD {

	private Communicator com;
	private Connection conexion;

	public ConexionBD(Communicator com) {
		this.com = com;
	}

	public String conectarBaseDatos() {

		try {
			Properties prop = com.getProperties();
			Class.forName("org.postgresql.Driver");

			String cadenaconexionRemota = prop.getProperty("ConexionBD");

			conexion = DriverManager.getConnection(cadenaconexionRemota, prop.getProperty("usuarioBD"),
					prop.getProperty("paswordBD"));
			if (conexion == null) {
				return "imposible de conectar";
			}

		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return null;
	}

	public Connection getConnection() {
		return conexion;
	}

	public void cerrarConexion() {
		try {
			conexion.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
}

--------------------------------------------------


./server/src/main/java/db/ManejadorDatos.java

package db;

import model.Candidato;
import model.Voto;

import java.sql.*;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

public class ManejadorDatos {

    private Connection conexion;

    public ManejadorDatos(Connection conexion) {
        this.conexion = conexion;
    }


    public void registrarVoto(Voto voto) throws SQLException {
        String sql = "INSERT INTO voto (candidato, fecha_emision) VALUES (?, ?)";
        try (PreparedStatement stmt = conexion.prepareStatement(sql)) {
            stmt.setInt(1, voto.getCandidatoId());
            stmt.setTimestamp(2, Timestamp.valueOf(voto.getFechaEmision()));
            stmt.executeUpdate();
        }
    }

    public List<Candidato> listarCandidatos() throws SQLException {
        List<Candidato> candidatos = new ArrayList<>();
        String sql = "SELECT id, nombre, partido_politico FROM candidato";
        try (Statement stmt = conexion.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {
            while (rs.next()) {
                Candidato c = new Candidato(
                        rs.getInt("id"),
                        rs.getString("nombre"),
                        rs.getString("partido_politico")
                );
                candidatos.add(c);
            }
        }
        return candidatos;
    }

    public boolean registrarCiudadanoSiNoExiste(String documento) throws SQLException {
        String checkSql = "SELECT 1 FROM ciudadano_voto WHERE documento = ?";
        try (PreparedStatement checkStmt = conexion.prepareStatement(checkSql)) {
            checkStmt.setString(1, documento);
            ResultSet rs = checkStmt.executeQuery();
            if (rs.next()) {
                // El ciudadano ya votó
                return false;
            }
        }

        String insertSql = "INSERT INTO ciudadano_voto (documento, fecha_voto) VALUES (?, ?)";
        try (PreparedStatement insertStmt = conexion.prepareStatement(insertSql)) {
            insertStmt.setString(1, documento);
            insertStmt.setTimestamp(2, Timestamp.valueOf(LocalDateTime.now()));
            insertStmt.executeUpdate();
            return true;
        }
    }

    public boolean existeCiudadano(String documento) throws SQLException {
        String sql = "SELECT 1 FROM ciudadano WHERE documento = ?";
        try (PreparedStatement stmt = conexion.prepareStatement(sql)) {
            stmt.setString(1, documento);
            ResultSet rs = stmt.executeQuery();
            return rs.next();
        }
    }

}

--------------------------------------------------


./server/src/main/java/model/Ciudadano.java

package model;

public class Ciudadano {
    private int id;
    private String documento;
    private String nombre;
    private String apellido;
    private int mesaId;

    public Ciudadano() {}
    public Ciudadano(int id, String documento, String nombre, String apellido, int mesaId) {
        super();
        this.id = id;
        this.documento = documento;
        this.nombre = nombre;
        this.apellido = apellido;
        this.mesaId = mesaId;
    }
    public int getId() {
        return id;
    }
    public void setId(int id) {
        this.id = id;
    }
    public String getDocumento() {
        return documento;
    }
    public void setDocumento(String documento) {
        this.documento = documento;
    }
    public String getNombre() {
        return nombre;
    }
    public void setNombre(String nombre) {
        this.nombre = nombre;
    }
    public String getApellido() {
        return apellido;
    }
    public void setApellido(String apellido) {
        this.apellido = apellido;
    }
    public int getMesaId() {
        return mesaId;
    }
    public void setMesaId(int mesaId) {
        this.mesaId = mesaId;
    }
    
}

--------------------------------------------------


./server/src/main/java/model/Departamento.java

package model;

public class Departamento {
    private int id;
    private String nombre;

    public Departamento(){}

    public Departamento(int id, String nombre) {
        super();
        this.id = id;
        this.nombre = nombre;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getNombre() {
        return nombre;
    }

    public void setNombre(String nombre) {
        this.nombre = nombre;
    }

    
}

--------------------------------------------------


./server/src/main/java/model/MesaVotacion.java

package model;

public class MesaVotacion {
    private int id;
    private int consecutive;
    private int puestoId;

    public MesaVotacion() {}

    public MesaVotacion(int id, int consecutive, int puestoId) {
        super();
        this.id = id;
        this.consecutive = consecutive;
        this.puestoId = puestoId;
    }

    public int getId() {
        return id;
    }
    public void setId(int id) {
        this.id = id;
    }
    public int getConsecutive() {
        return consecutive;
    }
    public void setConsecutive(int consecutive) {
        this.consecutive = consecutive;
    }
    public int getPuestoId() {
        return puestoId;
    }
    public void setPuestoId(int puestoId) {
        this.puestoId = puestoId;
    }
    
}

--------------------------------------------------


./server/src/main/java/model/Municipio.java

package model;

public class Municipio {
    private int id;
    private String nombre;
    private int departamentoId;

    public Municipio() {}
    public Municipio(int id, String nombre, int departamentoId) {
        super();
        this.id = id;
        this.nombre = nombre;
        this.departamentoId = departamentoId;
    }
    public int getId() {
        return id;
    }
    public void setId(int id) {
        this.id = id;
    }
    public String getNombre() {
        return nombre;
    }
    public void setNombre(String nombre) {
        this.nombre = nombre;
    }
    public int getDepartamentoId() {
        return departamentoId;
    }
    public void setDepartamentoId(int departamentoId) {
        this.departamentoId = departamentoId;
    }
    
}

--------------------------------------------------


./server/src/main/java/model/PuestoVotacion.java

package model;

public class PuestoVotacion {
    private int id;
    private String nombre;
    private int consecutive;
    private String direccion;
    private int municipioId;

    public PuestoVotacion() {}

    public PuestoVotacion(int id, String nombre, int consecutive, String direccion, int municipioId) {
        super();
        this.id = id;
        this.nombre = nombre;
        this.consecutive = consecutive;
        this.direccion = direccion;
        this.municipioId = municipioId;
    }
    public int getId() {
        return id;
    }
    public void setId(int id) {
        this.id = id;
    }
    public String getNombre() {
        return nombre;
    }
    public void setNombre(String nombre) {
        this.nombre = nombre;
    }
    public int getConsecutive() {
        return consecutive;
    }
    public void setConsecutive(int consecutive) {
        this.consecutive = consecutive;
    }
    public String getDireccion() {
        return direccion;
    }
    public void setDireccion(String direccion) {
        this.direccion = direccion;
    }
    public int getMunicipioId() {
        return municipioId;
    }
    public void setMunicipioId(int municipioId) {
        this.municipioId = municipioId;
    }

}

--------------------------------------------------


./server/src/main/java/model/Voto.java

package model;

import java.time.LocalDateTime;

public class Voto {
    private int id;
    private int candidatoId;
    private LocalDateTime fechaEmision;

    public Voto() {}

    public Voto(int id, int candidatoId, LocalDateTime fechaEmision) {
        super();
        this.id = id;
        this.candidatoId = candidatoId;
        this.fechaEmision = fechaEmision;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public int getCandidatoId() {
        return candidatoId;
    }

    public void setCandidatoId(int candidatoId) {
        this.candidatoId = candidatoId;
    }

    public LocalDateTime getFechaEmision() {
        return fechaEmision;
    }

    public void setFechaEmision(LocalDateTime fechaEmision) {
        this.fechaEmision = fechaEmision;
    }
}
--------------------------------------------------


./server/src/main/java/model/Candidato.java

package model;

public class Candidato {
    private int id;
    private String nombre;
    private String partidoPolitico;

    public Candidato() {}

    public Candidato(int id, String nombre, String partidoPolitico) {
        super();
        this.id = id;
        this.nombre = nombre;
        this.partidoPolitico = partidoPolitico;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getNombre() {
        return nombre;
    }

    public void setNombre(String nombre) {
        this.nombre = nombre;
    }

    public String getPartidoPolitico() {
        return partidoPolitico;
    }

    public void setPartidoPolitico(String partidoPolitico) {
        this.partidoPolitico = partidoPolitico;
    }


}

--------------------------------------------------


./server/src/main/java/model/CiudadanoVoto.java

package model;

import java.time.LocalDateTime;

public class CiudadanoVoto {
    private int id;
    private String documento;
    private LocalDateTime fechaVoto;

    public CiudadanoVoto() {}

    public CiudadanoVoto(int id, String documento, LocalDateTime fechaVoto) {
        this.id = id;
        this.documento = documento;
        this.fechaVoto = fechaVoto;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getDocumento() {
        return documento;
    }

    public void setDocumento(String documento) {
        this.documento = documento;
    }

    public LocalDateTime getFechaVoto() {
        return fechaVoto;
    }

    public void setFechaVoto(LocalDateTime fechaVoto) {
        this.fechaVoto = fechaVoto;
    }
}

--------------------------------------------------


./server/src/main/java/services/VoteStationImpl.java

package services;

import app.VoteStation;
import com.zeroc.Ice.Current;
import db.ConexionBD;
import db.ManejadorDatos;
import model.Voto;

import java.sql.Connection;
import java.time.LocalDateTime;

public class VoteStationImpl implements VoteStation {

    @Override
    public int vote(String document, int candidateId, Current current) {
        ConexionBD connBD = new ConexionBD(current.adapter.getCommunicator());
        connBD.conectarBaseDatos();
        Connection conn = connBD.getConnection();
        ManejadorDatos manejador = new ManejadorDatos(conn);

        try {
            // 3. Verificar si existe el ciudadano en la BD
            if (!manejador.existeCiudadano(document)) {
                return 3; // No existe
            }

            // 1. Verificar si ya votó
            if (!manejador.registrarCiudadanoSiNoExiste(document)) {
                return 2; // Ya votó
            }

            // Registrar voto
            Voto voto = new Voto(0, candidateId, LocalDateTime.now());
            manejador.registrarVoto(voto);
            return 0; // Puede votar

        } catch (Exception e) {
            e.printStackTrace();
            return -1;
        } finally {
            connBD.cerrarConexion();
        }
    }
}

--------------------------------------------------


./server/src/main/resources/server.config

ConexionBD = jdbc:postgresql://localhost:5432/sistema_votaciones
usuarioBD = votaciones_user
paswordBD = votaciones123

Server.Endpoints=tcp -h localhost -p 10012
--------------------------------------------------


📦 Archivos especiales encontrados fuera de las carpetas 'src' o incluidas:


./build.gradle

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn more about Gradle by exploring our Samples at https://docs.gradle.org/8.12/samples
 */

plugins {
  id("com.zeroc.gradle.ice-builder.slice") version "1.5.0" apply false
}

subprojects{

    apply plugin: 'java'
    apply plugin: 'application'
    apply plugin: 'com.zeroc.gradle.ice-builder.slice'

    
}

--------------------------------------------------


./client/Client.ice

module client {
    struct Voto {
        string documento;
        int idCandidato;
    };

    interface Mesa {
        void enviarVoto(Voto voto);
    }
}

--------------------------------------------------


./client/build.gradle

slice {
    java {
        files = [file("Client.ice")]
    }
}

repositories {
    mavenCentral()
}

dependencies{
    implementation 'com.zeroc:ice:3.7.2'
    implementation project(':reliableServer')
}

jar {
        manifest {
            attributes(
                "Main-Class": project.name.capitalize(),
                "Class-Path": configurations.runtimeClasspath.resolve().collect { it.toURI() }.join(' ')
            )
        }
    }
--------------------------------------------------


./mesaVotacion/build.gradle


repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.zeroc:ice:3.7.2'
    implementation project(':client')
}

jar {
    manifest {
        attributes(
            "Main-Class": project.name.capitalize(),
            "Class-Path": configurations.runtimeClasspath.resolve().collect { it.toURI() }.join(' ')
        )
    }
}
--------------------------------------------------


./reliableServer/ReliableMessage.ice

module reliableMessage{

    ["java:serializable:model.ReliableMessage"]
    sequence<byte> RMessage;
    ["java:serializable:model.Message"]
    sequence<byte> Message;


    interface ACKService{
        void ack(string messageId);
    }
    interface RMDestination{
        void reciveMessage(RMessage rmessage, ACKService* prx);
    }
    interface RMSource{
        void setServerProxy(RMDestination* destination);
        void sendMessage(Message msg);
    }

}
--------------------------------------------------


./reliableServer/build.gradle

slice {
    java {
        files = [file("ReliableMessage.ice")]
    }
}

repositories {
    mavenCentral()
}

dependencies{
    implementation 'com.zeroc:ice:3.7.2'

}


jar {
        manifest {
            attributes(
                "Main-Class": project.name.capitalize(),
                "Class-Path": configurations.runtimeClasspath.resolve().collect { it.toURI() }.join(' ')
            )
        }
    }
--------------------------------------------------


./server/build.gradle

slice {
    java {
        files = [file("Service.ice")]
    }
}
repositories {
    mavenCentral()
}

dependencies{
    implementation 'com.zeroc:ice:3.7.2'

    implementation project(':reliableServer')

    implementation 'org.postgresql:postgresql:42.3.1'

}

jar {
        manifest {
            attributes(
                "Main-Class": project.name.capitalize(),
                "Class-Path": configurations.runtimeClasspath.resolve().collect { it.toURI() }.join(' ')
            )
        }
    }
--------------------------------------------------


./server/Service.ice

module app{
    interface Service{
        void print();
    }

    interface VoteStation {
        int vote(string document, int candidateId);
    }
    
}
--------------------------------------------------


./settings.gradle

/*
 * This file was generated by the Gradle 'init' task.
 *
 * The settings file is used to specify which projects to include in your build.
 * For more detailed information on multi-project builds, please refer to https://docs.gradle.org/8.12/userguide/multi_project_builds.html in the Gradle documentation.
 */

rootProject.name = 'reliable-message-example'


include('reliableServer')
include('server')
include('client')
include ('mesaVotacion')

--------------------------------------------------

