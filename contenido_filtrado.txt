================================================================================
FILE: C:\Users\alexd\Universidad\SextoSemestre\Compunet\SistemaVotacion\build.gradle
--------------------------------------------------------------------------------
/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn more about Gradle by exploring our Samples at https://docs.gradle.org/8.12/samples
 */

plugins {
  id("com.zeroc.gradle.ice-builder.slice") version "1.5.0" apply false
}

subprojects{

    apply plugin: 'java'
    apply plugin: 'application'
    apply plugin: 'com.zeroc.gradle.ice-builder.slice'

    
}


================================================================================
FILE: C:\Users\alexd\Universidad\SextoSemestre\Compunet\SistemaVotacion\settings.gradle
--------------------------------------------------------------------------------
/*
 * This file was generated by the Gradle 'init' task.
 *
 * The settings file is used to specify which projects to include in your build.
 * For more detailed information on multi-project builds, please refer to https://docs.gradle.org/8.12/userguide/multi_project_builds.html in the Gradle documentation.
 */

rootProject.name = 'reliable-message-example'


include('reliableServer')
include('server')
include('lugarVotacion')
include ('mesaVotacion')
include ('broker')
include ('proxySinchronization')


================================================================================
FILE: C:\Users\alexd\Universidad\SextoSemestre\Compunet\SistemaVotacion\broker\broker.ice
--------------------------------------------------------------------------------
module broker {

    interface BrokerService {
        void registrarProxy(string id, string proxyString);
        void registrarCliente(string idLugar);
        string obtenerProxy(string idLugar);
    }

}


================================================================================
FILE: C:\Users\alexd\Universidad\SextoSemestre\Compunet\SistemaVotacion\broker\build.gradle
--------------------------------------------------------------------------------
slice {
    java {
        files = [file("broker.ice")]
    }
}

repositories {
    mavenCentral()
}


dependencies {
    implementation 'com.zeroc:ice:3.7.2'
}

jar {
    manifest {
        attributes(
            "Main-Class": project.name.capitalize(),
            "Class-Path": configurations.runtimeClasspath.resolve().collect { it.toURI() }.join(' ')
        )
    }
}


================================================================================
FILE: C:\Users\alexd\Universidad\SextoSemestre\Compunet\SistemaVotacion\broker\src\main\java\Broker.java
--------------------------------------------------------------------------------
import com.zeroc.Ice.*;
import services.BrokerServiceImpl;

public class Broker {
    public static void main(String[] args) {
        try (Communicator communicator = Util.initialize(args, "broker.config")) {
            ObjectAdapter adapter = communicator.createObjectAdapter("BrokerAdapter");
            adapter.add(new BrokerServiceImpl(), Util.stringToIdentity("Broker"));
            adapter.activate();
            System.out.println("Broker iniciado.");
            communicator.waitForShutdown();
        }
    }
}


================================================================================
FILE: C:\Users\alexd\Universidad\SextoSemestre\Compunet\SistemaVotacion\broker\src\main\java\services\BrokerServiceImpl.java
--------------------------------------------------------------------------------
package services;

import broker.BrokerService;
import com.zeroc.Ice.Current;

import java.util.*;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.atomic.AtomicInteger;

public class BrokerServiceImpl implements BrokerService {

    private final Map<String, String> proxies = new ConcurrentHashMap<>();
    private final List<String> proxyIds = new ArrayList<>();
    private final AtomicInteger counter = new AtomicInteger(0);

    @Override
    public void registrarProxy(String id, String proxyString, Current current) {
        if (!proxies.containsKey(id)) {
            proxies.put(id, proxyString);
            synchronized (proxyIds) {
                proxyIds.add(id);
            }
            System.out.println("Registrado proxy: " + id);
        }
    }

    @Override
    public void registrarCliente(String idLugar, Current current) {
        System.out.println("Registrado cliente: " + idLugar);
    }

    @Override
    public String obtenerProxy(String idLugar, Current current) {
        synchronized (proxyIds) {
            if (proxyIds.isEmpty()) {
                return null;
            }
            int index = counter.getAndUpdate(i -> (i + 1) % proxyIds.size());
            String selectedId = proxyIds.get(index);
            return proxies.get(selectedId);
        }
    }
}


================================================================================
FILE: C:\Users\alexd\Universidad\SextoSemestre\Compunet\SistemaVotacion\broker\src\main\resources\broker.config
--------------------------------------------------------------------------------
BrokerAdapter.Endpoints=tcp -h localhost -p 10020


================================================================================
FILE: C:\Users\alexd\Universidad\SextoSemestre\Compunet\SistemaVotacion\lugarVotacion\build.gradle
--------------------------------------------------------------------------------
slice {
    java {
        files = [file("lugarVotacion.ice")]
    }
}

repositories {
    mavenCentral()
}

dependencies{
    implementation 'com.zeroc:ice:3.7.2'
    implementation project(':reliableServer')
    implementation project(':broker')
}

jar {
        manifest {
            attributes(
                "Main-Class": project.name.capitalize(),
                "Class-Path": configurations.runtimeClasspath.resolve().collect { it.toURI() }.join(' ')
            )
        }
    }

================================================================================
FILE: C:\Users\alexd\Universidad\SextoSemestre\Compunet\SistemaVotacion\lugarVotacion\lugarVotacion.ice
--------------------------------------------------------------------------------
module lugarVotacion {

    struct Voto {
        int idVoto;
    };

    interface Mesa {
        void enviarVoto(Voto voto);
    }
}


================================================================================
FILE: C:\Users\alexd\Universidad\SextoSemestre\Compunet\SistemaVotacion\lugarVotacion\src\main\java\LugarVotacion.java
--------------------------------------------------------------------------------
import lugarVotacion.Mesa;
import com.zeroc.Ice.*;
import model.Message;
import reliableMessage.RMDestinationPrx;
import reliableMessage.RMSourcePrx;
import services.LugarVotacionReceiver;
import broker.BrokerServicePrx;

public class LugarVotacion {
    public static void main(String[] args) {
        try (Communicator communicator = Util.initialize(args)) {
            // Obtener proxy del Broker
            ObjectPrx brokerBase = communicator.stringToProxy("Broker:tcp -h localhost -p 10020");
            BrokerServicePrx broker = BrokerServicePrx.checkedCast(brokerBase);

            if (broker == null) {
                System.err.println("No se pudo obtener el proxy del Broker.");
                return;
            }

            // Registrar este lugar de votación
            String idLugar = "paris-1"; // puedes hacer esto configurable
            broker.registrarCliente(idLugar);

            // Obtener proxy de un ProxySynchronization asignado
            String proxyString = broker.obtenerProxy(idLugar);
            if (proxyString == null) {
                System.err.println("No hay proxies disponibles en el Broker.");
                return;
            }

            System.out.println("Proxy obtenido del broker: " + proxyString);

            // CAMBIO CRÍTICO: Usar el proxy directamente como RMSource (no como destino)
            RMSourcePrx rm = RMSourcePrx.checkedCast(communicator.stringToProxy(proxyString));
            
            if (rm == null) {
                System.err.println("No se pudo obtener el proxy RMSource del ProxySync.");
                return;
            }

            // Crear adaptador local
            ObjectAdapter adapter = communicator.createObjectAdapterWithEndpoints("LugarVotacion", "tcp -h localhost -p 10000");

            // Pasar proxy al servicio receptor
            Mesa servant = new LugarVotacionReceiver(rm);
            adapter.add(servant, Util.stringToIdentity("LugarVotacion"));

            adapter.activate();

            System.out.println("Lugar de votación activo y conectado al proxy sincronizador.");
            communicator.waitForShutdown();
        }
    }
}

================================================================================
FILE: C:\Users\alexd\Universidad\SextoSemestre\Compunet\SistemaVotacion\lugarVotacion\src\main\java\services\LugarVotacionReceiver.java
--------------------------------------------------------------------------------
package services;

import lugarVotacion.Mesa;
import lugarVotacion.Voto;
import com.zeroc.Ice.Current;
import model.Message;
import reliableMessage.RMSourcePrx;

public class LugarVotacionReceiver implements Mesa {

    private final RMSourcePrx rm;

    public LugarVotacionReceiver(RMSourcePrx rm) {
        this.rm = rm;
    }

    @Override
    public void enviarVoto(Voto voto, Current current) {
        System.out.println("Voto recibido: id " + voto.idVoto);

        // Convertir Voto a Message incluyendo el idVoto explícitamente
        Message msg = new Message();
        msg.idVoto = voto.idVoto;               // campo nuevo para identificación única
        msg.message = "Voto id: " + voto.idVoto; // campo descriptivo, opcional

        try {
            rm.sendMessage(msg);
            System.out.println("Voto reenviado a reliable message.");
        } catch (Exception e) {
            System.err.println("Error reenviando voto: " + e.getMessage());
        }
    }

}


================================================================================
FILE: C:\Users\alexd\Universidad\SextoSemestre\Compunet\SistemaVotacion\lugarVotacion\src\main\resources\lugarVotacion.config
--------------------------------------------------------------------------------
MesaService.Endpoints=tcp -h localhost -p 10000

================================================================================
FILE: C:\Users\alexd\Universidad\SextoSemestre\Compunet\SistemaVotacion\mesavotacion\build.gradle
--------------------------------------------------------------------------------

repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.zeroc:ice:3.7.2'
    implementation project(':lugarVotacion')
}

jar {
    manifest {
        attributes(
            "Main-Class": project.name.capitalize(),
            "Class-Path": configurations.runtimeClasspath.resolve().collect { it.toURI() }.join(' ')
        )
    }
}

================================================================================
FILE: C:\Users\alexd\Universidad\SextoSemestre\Compunet\SistemaVotacion\mesavotacion\src\main\java\MesaVotacion.java
--------------------------------------------------------------------------------
import lugarVotacion.MesaPrx;
import lugarVotacion.Voto;
import com.zeroc.Ice.*;

public class MesaVotacion {
    public static void main(String[] args) {
        try (Communicator communicator = Util.initialize(args)) {
            // Conectarse al cliente que está escuchando en el puerto 10000
            ObjectPrx base = communicator.stringToProxy("LugarVotacion:tcp -h localhost -p 10000");
            MesaPrx cliente = MesaPrx.checkedCast(base);

            if (cliente == null) {
                System.err.println("No se pudo obtener el proxy del cliente.");
                return;
            }

            // Crear un voto y asignar valores
            
                Voto voto = new Voto();
                voto.idVoto = 1;  // Ejemplo de id, puedes asignar lo que necesites

                // Enviar el voto al cliente
                cliente.enviarVoto(voto);
                System.out.println("Voto enviado correctamente al Lugar de Votacion.");
            
            
        }
    }
}


================================================================================
FILE: C:\Users\alexd\Universidad\SextoSemestre\Compunet\SistemaVotacion\proxySinchronization\build.gradle
--------------------------------------------------------------------------------
repositories {
    mavenCentral()
}


dependencies {
    implementation 'com.zeroc:ice:3.7.2'
    implementation project(':reliableServer')  // contiene reliableMessage, model, communication, threads
    implementation project(':broker')          // contiene broker.BrokerServicePrx
}

jar {
    manifest {
        attributes(
            "Main-Class": project.name.capitalize(),
            "Class-Path": configurations.runtimeClasspath.resolve().collect { it.toURI() }.join(' ')
        )
    }
}


================================================================================
FILE: C:\Users\alexd\Universidad\SextoSemestre\Compunet\SistemaVotacion\proxySinchronization\proxy.ice
--------------------------------------------------------------------------------


================================================================================
FILE: C:\Users\alexd\Universidad\SextoSemestre\Compunet\SistemaVotacion\proxySinchronization\src\main\java\ProxySinchronization.java
--------------------------------------------------------------------------------
import com.zeroc.Ice.*;
import reliableMessage.ACKServicePrx;
import reliableMessage.RMDestinationPrx;
import model.ReliableMessage;
import communication.Notification;
import services.ProxySyncReceiver;
import services.ProxySyncSender;
import threads.RMJob;
import broker.BrokerServicePrx;

public class ProxySinchronization {
    public static void main(String[] args) {
        try (Communicator communicator = Util.initialize(args, "proxy.config")) {

            // Notificación entre receptor y emisor (para reenviar y confirmar mensajes)
            Notification notification = new Notification();

            // Hilo de reintentos confiables
            RMJob job = new RMJob(notification);
            job.start();

            // Servicio receptor (ACK desde servidor)
            ProxySyncReceiver receiver = new ProxySyncReceiver(job);

            // Servicio emisor (envía mensajes al servidor)
            ProxySyncSender sender = new ProxySyncSender(job, notification);

            // Adaptador local para recibir conexiones
            ObjectAdapter adapter = communicator.createObjectAdapter("ProxySyncAdapter");

            // Registrar objetos en el adaptador
            ObjectPrx senderPrx = adapter.add(sender, Util.stringToIdentity("Sender")); // RMSource
            ObjectPrx ackPrx = adapter.add(receiver, Util.stringToIdentity("AckReceiver")); // ACKService

            // Configurar ACK para ReliableMessaging
            notification.setAckService(ACKServicePrx.checkedCast(ackPrx));

            // Activar el adaptador
            adapter.activate();

            // -----------------------------------------------
            // CONFIGURAR DESTINO (ServidorCentral)
            // -----------------------------------------------
            // CAMBIO CRÍTICO: Usar "RMDestination" en lugar de "Service"
            ObjectPrx serverBase = communicator.stringToProxy("RMDestination:tcp -h localhost -p 10012");
            RMDestinationPrx server = RMDestinationPrx.checkedCast(serverBase);

            if (server == null) {
                System.err.println("No se pudo obtener el proxy del ServidorCentral.");
                return;
            }

            notification.setService(server);
            System.out.println("ServidorCentral configurado como destino en ProxySynchronization.");

            // -----------------------------------------------
            // REGISTRO EN EL BROKER
            // -----------------------------------------------
            ObjectPrx brokerBase = communicator.stringToProxy("Broker:tcp -h localhost -p 10020");
            BrokerServicePrx broker = BrokerServicePrx.checkedCast(brokerBase);

            if (broker == null) {
                System.err.println("No se pudo obtener el proxy del Broker.");
                return;
            }

            String proxyString = communicator.proxyToString(senderPrx);
            broker.registrarProxy("proxySync-1", proxyString);
            System.out.println("ProxySync registrado en el broker.");

            // Esperar señal de apagado
            System.out.println("ProxySynchronization activo y listo.");
            communicator.waitForShutdown();
        }
    }
}

================================================================================
FILE: C:\Users\alexd\Universidad\SextoSemestre\Compunet\SistemaVotacion\proxySinchronization\src\main\java\services\ProxySyncReceiver.java
--------------------------------------------------------------------------------
package services;

import com.zeroc.Ice.Current;
import model.ReliableMessage;
import reliableMessage.ACKService;
import threads.RMJob;

public class ProxySyncReceiver implements ACKService {

    private final RMJob job;

    public ProxySyncReceiver(RMJob job) {
        this.job = job;
    }

    @Override
    public void ack(String messageId, Current current) {
        System.out.println("ACK recibido en ProxySync para mensaje: " + messageId);
        job.confirmMessage(messageId);
    }
}


================================================================================
FILE: C:\Users\alexd\Universidad\SextoSemestre\Compunet\SistemaVotacion\proxySinchronization\src\main\java\services\ProxySyncSender.java
--------------------------------------------------------------------------------
package services;

import com.zeroc.Ice.Current;
import communication.Notification;
import model.Message;
import reliableMessage.RMDestinationPrx;
import reliableMessage.RMSource;
import threads.RMJob;

public class ProxySyncSender implements RMSource {

    private final RMJob job;
    private final Notification notification;

    public ProxySyncSender(RMJob job, Notification notification) {
        this.job = job;
        this.notification = notification;
    }

    @Override
    public void sendMessage(Message msg, Current current) {
        System.out.println("Mensaje recibido en ProxySync para reenviar al servidor central.");
        job.add(msg);
    }

    @Override
    public void setServerProxy(RMDestinationPrx destination, Current current) {
        // Este método ya no se usa porque el destino se configura directamente en ProxySynchronization
        System.out.println("setServerProxy llamado, pero el destino ya está configurado.");
    }
}

================================================================================
FILE: C:\Users\alexd\Universidad\SextoSemestre\Compunet\SistemaVotacion\proxySinchronization\src\main\resources\proxy.config
--------------------------------------------------------------------------------
ProxySyncAdapter.Endpoints=tcp -h localhost -p 10030


================================================================================
FILE: C:\Users\alexd\Universidad\SextoSemestre\Compunet\SistemaVotacion\reliableServer\build.gradle
--------------------------------------------------------------------------------
slice {
    java {
        files = [file("ReliableMessage.ice")]
    }
}

repositories {
    mavenCentral()
}

dependencies{
    implementation 'com.zeroc:ice:3.7.2'

}


jar {
        manifest {
            attributes(
                "Main-Class": project.name.capitalize(),
                "Class-Path": configurations.runtimeClasspath.resolve().collect { it.toURI() }.join(' ')
            )
        }
    }

================================================================================
FILE: C:\Users\alexd\Universidad\SextoSemestre\Compunet\SistemaVotacion\reliableServer\ReliableMessage.ice
--------------------------------------------------------------------------------
module reliableMessage{

    ["java:serializable:model.ReliableMessage"]
    sequence<byte> RMessage;
    ["java:serializable:model.Message"]
    sequence<byte> Message;


    interface ACKService{
        void ack(string messageId);
    }
    interface RMDestination{
        void reciveMessage(RMessage rmessage, ACKService* prx);
    }
    interface RMSource{
        void setServerProxy(RMDestination* destination);
        void sendMessage(Message msg);
    }

}

================================================================================
FILE: C:\Users\alexd\Universidad\SextoSemestre\Compunet\SistemaVotacion\reliableServer\src\main\java\ReliableServer.java
--------------------------------------------------------------------------------
import com.zeroc.Ice.Communicator;
import com.zeroc.Ice.ObjectAdapter;
import com.zeroc.Ice.ObjectPrx;
import com.zeroc.Ice.Util;

import communication.Notification;
import reliableMessage.ACKServicePrx;
import services.RMReciever;
import services.RMSender;
import threads.RMJob;

public class ReliableServer {
    
    public static void main(String[] args) {
        Communicator communicator = Util.initialize(args, "rmservice.config");

        Notification notification = new Notification();
        RMJob job = new RMJob(notification);
        RMReciever rec = new RMReciever(job);
        RMSender sender = new RMSender(job, notification);

        ObjectAdapter adapter = communicator.createObjectAdapter("RMService");
        adapter.add(sender, Util.stringToIdentity("Sender"));
        ObjectPrx prx = adapter.add(rec, Util.stringToIdentity("AckCallback"));
        notification.setAckService(ACKServicePrx.checkedCast(prx));
        adapter.activate();
        job.start();

        communicator.waitForShutdown();
        
    }

    
}


================================================================================
FILE: C:\Users\alexd\Universidad\SextoSemestre\Compunet\SistemaVotacion\reliableServer\src\main\java\communication\Notification.java
--------------------------------------------------------------------------------
package communication;

import model.ReliableMessage;
import reliableMessage.RMDestinationPrx;
import reliableMessage.ACKServicePrx;

public class Notification {

    private RMDestinationPrx service;

    private ACKServicePrx ackService;

    public void setAckService(ACKServicePrx ackService) {
        this.ackService = ackService;
    }

    public void setService(RMDestinationPrx service) {
        this.service = service;
    }

    public void sendMessage(ReliableMessage message){
        service.reciveMessage(message, ackService);
    }
}


================================================================================
FILE: C:\Users\alexd\Universidad\SextoSemestre\Compunet\SistemaVotacion\reliableServer\src\main\java\model\Message.java
--------------------------------------------------------------------------------
package model;

import java.io.Serializable;

public class Message implements Serializable {
    public String message;
    public int idVoto; // nuevo campo explícito para identificar el voto
}


================================================================================
FILE: C:\Users\alexd\Universidad\SextoSemestre\Compunet\SistemaVotacion\reliableServer\src\main\java\model\ReliableMessage.java
--------------------------------------------------------------------------------
package model;

import java.io.Serializable;

public class ReliableMessage implements Serializable{
    
    private String uuid;
    private long numberMessage;
    private String state;

    private Message message;

    public ReliableMessage(String uuid, long numberMessage, String state, Message message) {
        this.uuid = uuid;
        this.numberMessage = numberMessage;
        this.state = state;
        this.message = message;
    }

    public String getUuid() {
        return uuid;
    }

    public void setUuid(String uuid) {
        this.uuid = uuid;
    }

    public long getNumberMessage() {
        return numberMessage;
    }

    public void setNumberMessage(long numberMessage) {
        this.numberMessage = numberMessage;
    }

    public String getState() {
        return state;
    }

    public void setState(String state) {
        this.state = state;
    }

    public Message getMessage() {
        return message;
    }

    public void setMessage(Message message) {
        this.message = message;
    }
    
    
    
    
}


================================================================================
FILE: C:\Users\alexd\Universidad\SextoSemestre\Compunet\SistemaVotacion\reliableServer\src\main\java\services\RMReciever.java
--------------------------------------------------------------------------------
package services;

import com.zeroc.Ice.Current;

import reliableMessage.ACKService;
import threads.RMJob;

public class  RMReciever implements  ACKService {

    private RMJob jobM;

    

    public RMReciever(RMJob job) {
        this.jobM = job;
    }

    @Override
    public void ack(String messageId, Current current) {
        jobM.confirmMessage(messageId);
    }

    
    
}


================================================================================
FILE: C:\Users\alexd\Universidad\SextoSemestre\Compunet\SistemaVotacion\reliableServer\src\main\java\services\RMSender.java
--------------------------------------------------------------------------------
package services;

import com.zeroc.Ice.Current;

import communication.Notification;
import model.Message;
import reliableMessage.RMDestinationPrx;
import reliableMessage.RMSource;
import threads.RMJob;

public class RMSender implements RMSource{

    private RMJob jobM;
    private Notification notification;

    
    public RMSender(RMJob job, Notification not) {
        notification = not;
        jobM = job;
    }


    @Override
    public void sendMessage(Message msg, Current current) {
        jobM.add(msg);
    }
    @Override
    public void setServerProxy(RMDestinationPrx destination, Current current){
        notification.setService(destination);
    }


    
}


================================================================================
FILE: C:\Users\alexd\Universidad\SextoSemestre\Compunet\SistemaVotacion\reliableServer\src\main\java\threads\RMJob.java
--------------------------------------------------------------------------------
    package threads;

import java.util.Map;
import java.util.UUID;
import java.util.concurrent.ConcurrentHashMap;

import communication.Notification;
import model.Message;
import model.ReliableMessage;

public class RMJob extends Thread{

    public static final String PENDING = "Pending";
    public static final String SENDED = "Sended";

    private Map<String,ReliableMessage> messagesPendig = new ConcurrentHashMap<>();
    private Map<String,ReliableMessage> forConfirm = new ConcurrentHashMap<>();


    private Long sequenceNumber = 0l;
    private Object lock = new Object();
    private boolean enable = true;
    private Notification notification;

    public RMJob(Notification notification) {
        this.notification = notification;
    }

    public void add(Message message){
        synchronized (lock) {
            ReliableMessage mes = new ReliableMessage(UUID.randomUUID().toString(), sequenceNumber++, PENDING, message);
            messagesPendig.put(mes.getUuid(),mes);
        }
    }

    public void confirmMessage(String uid){
        forConfirm.remove(uid);
    }

    public void setEnable(boolean enable) {
        this.enable = enable;
    }

    @Override
    public void run(){
        while (enable) { 
            System.out.println("cicle");
            for(Map.Entry<String,ReliableMessage> rm: messagesPendig.entrySet()){
                try {
                    System.out.println("Sendig messge");
                    notification.sendMessage(rm.getValue());
                    messagesPendig.remove(rm.getKey());
                    forConfirm.put(rm.getKey(), rm.getValue());
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            try {
                Thread.sleep(10000);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
}


================================================================================
FILE: C:\Users\alexd\Universidad\SextoSemestre\Compunet\SistemaVotacion\reliableServer\src\main\resources\rmservice.config
--------------------------------------------------------------------------------
RMService.Endpoints=tcp -h localhost -p 10010

================================================================================
FILE: C:\Users\alexd\Universidad\SextoSemestre\Compunet\SistemaVotacion\server\build.gradle
--------------------------------------------------------------------------------
repositories {
    mavenCentral()
}

slice {
    java {
        files = [file("../reliableServer/ReliableMessage.ice")]
    }
}


dependencies{
    implementation 'com.zeroc:ice:3.7.2'

    implementation project(':reliableServer')
}

jar {
        manifest {
            attributes(
                "Main-Class": project.name.capitalize(),
                "Class-Path": configurations.runtimeClasspath.resolve().collect { it.toURI() }.join(' ')
            )
        }
    }

================================================================================
FILE: C:\Users\alexd\Universidad\SextoSemestre\Compunet\SistemaVotacion\server\Service.ice
--------------------------------------------------------------------------------
module app{
    interface Service{
        void print();
    }
    
}

================================================================================
FILE: C:\Users\alexd\Universidad\SextoSemestre\Compunet\SistemaVotacion\server\src\main\java\Server.java
--------------------------------------------------------------------------------
import com.zeroc.Ice.Communicator;
import com.zeroc.Ice.ObjectAdapter;
import com.zeroc.Ice.Util;

public class Server {
    public static void main(String[] args) {
        Communicator com = Util.initialize();
        ServiceImp imp = new ServiceImp();
        ObjectAdapter adapter = com.createObjectAdapterWithEndpoints("Server", "tcp -h localhost -p 10012");
        
        // CAMBIO CRÍTICO: Registrar como "RMDestination" en lugar de "Service"
        // porque ServiceImp implementa RMDestination, no app.Service
        adapter.add(imp, Util.stringToIdentity("RMDestination"));
        
        adapter.activate();
        System.out.println("Servidor Central iniciado y esperando mensajes confiables...");
        com.waitForShutdown();
    }
}

================================================================================
FILE: C:\Users\alexd\Universidad\SextoSemestre\Compunet\SistemaVotacion\server\src\main\java\ServiceImp.java
--------------------------------------------------------------------------------
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;

import com.zeroc.Ice.Current;

import model.Message;
import model.ReliableMessage;
import reliableMessage.ACKServicePrx;
import reliableMessage.RMDestination;

public class ServiceImp implements RMDestination {

    private Set<Integer> votosProcesados = ConcurrentHashMap.newKeySet();

    public int contadorExito=0;

    public int contadorDuplicado=0;

    @Override
    public void reciveMessage(ReliableMessage rmessage, ACKServicePrx prx, Current current) {
        Message msg = rmessage.getMessage();

        if (!votosProcesados.add(msg.idVoto)) {
            System.out.println("Duplicado detectado para voto id: " + msg.idVoto);
            System.out.println("Contador Duplicados: "+contadorDuplicado++);
            
            prx.ack(rmessage.getUuid());
            return;
        }

        System.out.println("Procesando voto id: " + msg.idVoto);
        contadorExito++;
        System.out.println("Cantidad de votos recibidos: " + contadorExito);
        prx.ack(rmessage.getUuid());
    }
}


