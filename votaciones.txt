Buscando carpetas con código fuente...
--------------------------------------------------------------

📁 Carpeta procesada: ./client/src
Estructura completa:
./client/src
└── main
    ├── java
    │   ├── Client.java
    │   └── services
    │       └── ClientReceiver.java
    └── resources
        └── client.config

5 directories, 3 files

🧾 Archivos de código en ./client/src (con contenido):

./client/src/main/java/Client.java

import client.Mesa;
import com.zeroc.Ice.*;
import model.Message;
import reliableMessage.RMDestinationPrx;
import reliableMessage.RMSourcePrx;
import services.ClientReceiver;

public class Client {
    public static void main(String[] args) {
        try (Communicator communicator = Util.initialize(args)) {
            // Proxy hacia reliable message
            RMSourcePrx rm = RMSourcePrx.checkedCast(communicator.stringToProxy("Sender:tcp -h localhost -p 10010"));
            RMDestinationPrx dest = RMDestinationPrx.uncheckedCast(communicator.stringToProxy("Service:tcp -h localhost -p 10012"));
            rm.setServerProxy(dest);

            ObjectAdapter adapter = communicator.createObjectAdapterWithEndpoints("Client", "tcp -h localhost -p 10000");
            // Pasamos rm al servicio que implementa Mesa para poder reenviar
            Mesa servant = new ClientReceiver(rm);

            adapter.add(servant, Util.stringToIdentity("client"));
            adapter.activate();

            System.out.println("Cliente activo, esperando mensajes de mesa...");
            communicator.waitForShutdown();
        }
    }
}

--------------------------------------------------


./client/src/main/java/services/ClientReceiver.java

package services;

import client.Mesa;
import client.Voto;
import com.zeroc.Ice.Current;
import model.Message;
import reliableMessage.RMSourcePrx;

public class ClientReceiver implements Mesa {

    private final RMSourcePrx rm;

    public ClientReceiver(RMSourcePrx rm) {
        this.rm = rm;
    }

    @Override
    public void enviarVoto(Voto voto, Current current) {
        System.out.println("Voto recibido: id " + voto.idVoto);

        // Convertir Voto a Message incluyendo el idVoto explícitamente
        Message msg = new Message();
        msg.idVoto = voto.idVoto;               // campo nuevo para identificación única
        msg.message = "Voto id: " + voto.idVoto; // campo descriptivo, opcional

        try {
            rm.sendMessage(msg);
            System.out.println("Voto reenviado a reliable message.");
        } catch (Exception e) {
            System.err.println("Error reenviando voto: " + e.getMessage());
        }
    }

}


./client/build.gradle

slice {
    java {
        files = [file("Client.ice")]
    }
}

repositories {
    mavenCentral()
}

dependencies{
    implementation 'com.zeroc:ice:3.7.2'
    implementation project(':reliableServer')
}

jar {
        manifest {
            attributes(
                "Main-Class": project.name.capitalize(),
                "Class-Path": configurations.runtimeClasspath.resolve().collect { it.toURI() }.join(' ')
            )
        }
    }

./client/Client.ice

module client {

    struct Voto {
        int idVoto;
    };

    interface Mesa {
        void enviarVoto(Voto voto);
    }
}

./client/src/main/resources/client.config

MesaService.Endpoints=tcp -h localhost -p 10000

--------------------------------------------------


📁 Carpeta procesada: ./mesaVotacion/src
Estructura completa:
./mesaVotacion/src
└── main
    └── java
        └── MesaVotacion.java

3 directories, 1 file

🧾 Archivos de código en ./mesaVotacion/src (con contenido):

./mesaVotacion/src/main/java/MesaVotacion.java

import client.MesaPrx;
import client.Voto;
import com.zeroc.Ice.*;

public class MesaVotacion {
    public static void main(String[] args) {
        try (Communicator communicator = Util.initialize(args)) {
            // Conectarse al cliente que está escuchando en el puerto 10000
            ObjectPrx base = communicator.stringToProxy("client:tcp -h localhost -p 10000");
            MesaPrx cliente = MesaPrx.checkedCast(base);

            if (cliente == null) {
                System.err.println("No se pudo obtener el proxy del cliente.");
                return;
            }

            // Crear un voto y asignar valores
            for (int i = 0; i < 100; i++) {
                Voto voto = new Voto();
                voto.idVoto = i;  // Ejemplo de id, puedes asignar lo que necesites

                // Enviar el voto al cliente
                cliente.enviarVoto(voto);
                System.out.println("Voto enviado correctamente al cliente.");
            }
            
        }
    }
}

./mesaVotacion/build.gradle


repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.zeroc:ice:3.7.2'
    implementation project(':client')
}

jar {
    manifest {
        attributes(
            "Main-Class": project.name.capitalize(),
            "Class-Path": configurations.runtimeClasspath.resolve().collect { it.toURI() }.join(' ')
        )
    }
}

--------------------------------------------------


📁 Carpeta procesada: ./reliableServer/src
Estructura completa:
./reliableServer/src
└── main
    ├── java
    │   ├── communication
    │   │   └── Notification.java
    │   ├── model
    │   │   ├── Message.java
    │   │   └── ReliableMessage.java
    │   ├── ReliableServer.java
    │   ├── services
    │   │   ├── RMReciever.java
    │   │   └── RMSender.java
    │   └── threads
    │       └── RMJob.java
    └── resources
        └── rmservice.config

8 directories, 8 files

🧾 Archivos de código en ./reliableServer/src (con contenido):

./reliableServer/src/main/java/ReliableServer.java

import com.zeroc.Ice.Communicator;
import com.zeroc.Ice.ObjectAdapter;
import com.zeroc.Ice.ObjectPrx;
import com.zeroc.Ice.Util;

import communication.Notification;
import reliableMessage.ACKServicePrx;
import services.RMReciever;
import services.RMSender;
import threads.RMJob;

public class ReliableServer {
    
    public static void main(String[] args) {
        Communicator communicator = Util.initialize(args, "rmservice.config");

        Notification notification = new Notification();
        RMJob job = new RMJob(notification);
        RMReciever rec = new RMReciever(job);
        RMSender sender = new RMSender(job, notification);

        ObjectAdapter adapter = communicator.createObjectAdapter("RMService");
        adapter.add(sender, Util.stringToIdentity("Sender"));
        ObjectPrx prx = adapter.add(rec, Util.stringToIdentity("AckCallback"));
        notification.setAckService(ACKServicePrx.checkedCast(prx));
        adapter.activate();
        job.start();

        communicator.waitForShutdown();
        
    }

    
}

--------------------------------------------------


./reliableServer/src/main/java/communication/Notification.java

package communication;

import model.ReliableMessage;
import reliableMessage.RMDestinationPrx;
import reliableMessage.ACKServicePrx;

public class Notification {

    private RMDestinationPrx service;

    private ACKServicePrx ackService;

    public void setAckService(ACKServicePrx ackService) {
        this.ackService = ackService;
    }

    public void setService(RMDestinationPrx service) {
        this.service = service;
    }

    public void sendMessage(ReliableMessage message){
        service.reciveMessage(message, ackService);
    }
}

--------------------------------------------------


./reliableServer/src/main/java/model/ReliableMessage.java

package model;

import java.io.Serializable;

public class ReliableMessage implements Serializable{
    
    private String uuid;
    private long numberMessage;
    private String state;

    private Message message;

    public ReliableMessage(String uuid, long numberMessage, String state, Message message) {
        this.uuid = uuid;
        this.numberMessage = numberMessage;
        this.state = state;
        this.message = message;
    }

    public String getUuid() {
        return uuid;
    }

    public void setUuid(String uuid) {
        this.uuid = uuid;
    }

    public long getNumberMessage() {
        return numberMessage;
    }

    public void setNumberMessage(long numberMessage) {
        this.numberMessage = numberMessage;
    }

    public String getState() {
        return state;
    }

    public void setState(String state) {
        this.state = state;
    }

    public Message getMessage() {
        return message;
    }

    public void setMessage(Message message) {
        this.message = message;
    }
    
    
    
    
}

--------------------------------------------------


./reliableServer/src/main/java/model/Message.java

package model;

import java.io.Serializable;

public class Message implements Serializable {
    public String message;
    public int idVoto; // nuevo campo explícito para identificar el voto
}

--------------------------------------------------


./reliableServer/src/main/java/services/RMReciever.java

package services;

import com.zeroc.Ice.Current;

import reliableMessage.ACKService;
import threads.RMJob;

public class  RMReciever implements  ACKService {

    private RMJob jobM;

    

    public RMReciever(RMJob job) {
        this.jobM = job;
    }

    @Override
    public void ack(String messageId, Current current) {
        jobM.confirmMessage(messageId);
    }

    
    
}

--------------------------------------------------


./reliableServer/src/main/java/services/RMSender.java

package services;

import com.zeroc.Ice.Current;

import communication.Notification;
import model.Message;
import reliableMessage.RMDestinationPrx;
import reliableMessage.RMSource;
import threads.RMJob;

public class RMSender implements RMSource{

    private RMJob jobM;
    private Notification notification;

    
    public RMSender(RMJob job, Notification not) {
        notification = not;
        jobM = job;
    }


    @Override
    public void sendMessage(Message msg, Current current) {
        jobM.add(msg);
    }
    @Override
    public void setServerProxy(RMDestinationPrx destination, Current current){
        notification.setService(destination);
    }


    
}

--------------------------------------------------


./reliableServer/src/main/java/threads/RMJob.java

    package threads;

import java.util.Map;
import java.util.UUID;
import java.util.concurrent.ConcurrentHashMap;

import communication.Notification;
import model.Message;
import model.ReliableMessage;

public class RMJob extends Thread{

    public static final String PENDING = "Pending";
    public static final String SENDED = "Sended";

    private Map<String,ReliableMessage> messagesPendig = new ConcurrentHashMap<>();
    private Map<String,ReliableMessage> forConfirm = new ConcurrentHashMap<>();


    private Long sequenceNumber = 0l;
    private Object lock = new Object();
    private boolean enable = true;
    private Notification notification;

    public RMJob(Notification notification) {
        this.notification = notification;
    }

    public void add(Message message){
        synchronized (lock) {
            ReliableMessage mes = new ReliableMessage(UUID.randomUUID().toString(), sequenceNumber++, PENDING, message);
            messagesPendig.put(mes.getUuid(),mes);
        }
    }

    public void confirmMessage(String uid){
        forConfirm.remove(uid);
    }

    public void setEnable(boolean enable) {
        this.enable = enable;
    }

    @Override
    public void run(){
        while (enable) { 
            System.out.println("cicle");
            for(Map.Entry<String,ReliableMessage> rm: messagesPendig.entrySet()){
                try {
                    System.out.println("Sendig messge");
                    notification.sendMessage(rm.getValue());
                    messagesPendig.remove(rm.getKey());
                    forConfirm.put(rm.getKey(), rm.getValue());
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            try {
                Thread.sleep(10000);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
}

./reliableServer/build.gradle

slice {
    java {
        files = [file("ReliableMessage.ice")]
    }
}

repositories {
    mavenCentral()
}

dependencies{
    implementation 'com.zeroc:ice:3.7.2'

}


jar {
        manifest {
            attributes(
                "Main-Class": project.name.capitalize(),
                "Class-Path": configurations.runtimeClasspath.resolve().collect { it.toURI() }.join(' ')
            )
        }
    }

./reliableServer/ReliableMessage.ice

module reliableMessage{

    ["java:serializable:model.ReliableMessage"]
    sequence<byte> RMessage;
    ["java:serializable:model.Message"]
    sequence<byte> Message;


    interface ACKService{
        void ack(string messageId);
    }
    interface RMDestination{
        void reciveMessage(RMessage rmessage, ACKService* prx);
    }
    interface RMSource{
        void setServerProxy(RMDestination* destination);
        void sendMessage(Message msg);
    }

}

./reliableServer/src/main/resources/rmservice.config

RMService.Endpoints=tcp -h localhost -p 10010

--------------------------------------------------


📁 Carpeta procesada: ./server/src
Estructura completa:
./server/src
└── main
    └── java
        ├── Server.java
        └── ServiceImp.java

3 directories, 2 files

🧾 Archivos de código en ./server/src (con contenido):

./server/src/main/java/Server.java


import com.zeroc.Ice.Communicator;
import com.zeroc.Ice.ObjectAdapter;
import com.zeroc.Ice.Util;

public class Server {

    
    public static void main(String[] args) {
        Communicator com = Util.initialize();
        ServiceImp imp = new ServiceImp();
        ObjectAdapter adapter = com.createObjectAdapterWithEndpoints("Server", "tcp -h localhost -p 10012");
        adapter.add(imp, Util.stringToIdentity("Service"));
        adapter.activate();
        com.waitForShutdown();
    }
}

--------------------------------------------------


./server/src/main/java/ServiceImp.java

import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;

import com.zeroc.Ice.Current;

import model.Message;
import model.ReliableMessage;
import reliableMessage.ACKServicePrx;
import reliableMessage.RMDestination;

public class ServiceImp implements RMDestination {

    private Set<Integer> votosProcesados = ConcurrentHashMap.newKeySet();

    public int contadorExito=0;

    public int contadorDuplicado=0;

    @Override
    public void reciveMessage(ReliableMessage rmessage, ACKServicePrx prx, Current current) {
        Message msg = rmessage.getMessage();

        if (!votosProcesados.add(msg.idVoto)) {
            System.out.println("Duplicado detectado para voto id: " + msg.idVoto);
            System.out.println("Contador Duplicados: "+contadorDuplicado++);
            
            prx.ack(rmessage.getUuid());
            return;
        }

        System.out.println("Procesando voto id: " + msg.idVoto);
        System.out.println("Cantidad de votos recibidos: "+ contadorExito++);
        prx.ack(rmessage.getUuid());
    }
}

--------------------------------------------------

./server/build.gradle

slice {
    java {
        files = [file("Service.ice")]
    }
}
repositories {
    mavenCentral()
}

dependencies{
    implementation 'com.zeroc:ice:3.7.2'

    implementation project(':reliableServer')
}

jar {
        manifest {
            attributes(
                "Main-Class": project.name.capitalize(),
                "Class-Path": configurations.runtimeClasspath.resolve().collect { it.toURI() }.join(' ')
            )
        }
    }

./server/Service.ice
module app{
    interface Service{
        void print();
    }
    
}